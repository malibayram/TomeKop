@using Serilog
@using Utils
@inject IToastService toastService
@using Npgsql
@using System.Text.Json;
@using System.Text.Json.Serialization;

<div class="limiter">
    <div class="container-login100">
        <div class="wrap-login100">
            <div class="login100-pic js-tilt" data-tilt>
                <img src="images/img-01.png" alt="IMG">
            </div>
            @if (LogInPage)
            {
                <EditForm class="login100-form validate-form" Model="@uye" OnValidSubmit="@TryToLogIn">
                    <DataAnnotationsValidator />
                    <span class="login100-form-title">
                        Üye Giriş
                    </span>

                    <div class="wrap-input100 validate-input" data-validate="Geçerli bir mail adresi girin">
                        <InputText @bind-Value="@uye.Email" class="input100" placeholder="Email" />
                        <span class="focus-input100"></span>
                        <span class="symbol-input100">
                            <i class="fa fa-envelope" aria-hidden="true"></i>
                        </span>
                        <ValidationMessage For="@(() => uye.Email)" />
                    </div>

                    <div class="wrap-input100 validate-input" data-validate="Şifre Zorunludur">
                        <InputText @bind-Value="@uye.Sifre" class="input100" type="password" placeholder="Şifre" />
                        <span class="focus-input100"></span>
                        <span class="symbol-input100">
                            <i class="fa fa-lock" aria-hidden="true"></i>
                        </span>
                        <ValidationMessage For="@(() => uye.Sifre)" />
                    </div>

                    <div class="container-login100-form-btn">
                        <input type="submit" class="login100-form-btn" value="@ButtonText" />
                    </div>

                    <div class="text-center p-t-12">
                        @* <span class="txt1">
                            Forgot
                            </span>
                            <a class="txt2" href="#">
                            Username / Password?
                            </a> *@
                    </div>

                    <div class="text-center p-t-136">
                        <a class="txt2" href="#" @onclick="(() => ChangeForm(false))">
                            Hesabın yoksa buradan <b>Kayıt Ol!</b>
                            <i class="fa fa-arrow-right m-l-5" aria-hidden="true"></i>
                        </a>
                    </div>
                    <ValidationSummary />
                </EditForm>
            }
            else
            {
                <EditForm class="login100-form validate-form" Model="@uye" OnValidSubmit="@OnValidSubmit">
                    <span class="login100-form-title">
                        Üye Kayıt
                    </span>

                    <div class="wrap-input100 validate-input" data-validate="Geçerli bir doğum girin">
                        <label>Doğum Tarihi:</label>
                        <InputDate @bind-Value="@uye.DogumTarihi" DisplayName="Doğum Tarihi" class="form-control" />
                        <ValidationMessage For="@(() => uye.DogumTarihi)" />
                    </div>

                    <div class="wrap-input100 validate-input" data-validate="Geçerli bir mail adresi girin">
                        <InputText @bind-Value="@uye.Email" class="input100" placeholder="Email" />
                        <span class="focus-input100"></span>
                        <span class="symbol-input100">
                            <i class="fa fa-envelope" aria-hidden="true"></i>
                        </span>
                        <ValidationMessage For="@(() => uye.Email)" />
                    </div>

                    <div class="wrap-input100 validate-input" data-validate="Şifre Zorunludur">
                        <InputText @bind-Value="@uye.Sifre" class="input100" type="password" placeholder="Şifre" />
                        <span class="focus-input100"></span>
                        <span class="symbol-input100">
                            <i class="fa fa-lock" aria-hidden="true"></i>
                        </span>
                        <ValidationMessage For="@(() => uye.Sifre)" />
                    </div>

                    <div class="wrap-input100 validate-input" data-validate="Şifre Zorunludur">
                        <InputText @bind-Value="@SifreTekrar" class="input100" type="password" placeholder="Şifre Tekrar" />
                        <span class="focus-input100"></span>
                        <span class="symbol-input100">
                            <i class="fa fa-lock" aria-hidden="true"></i>
                        </span>
                    </div>

                    <div class="container-login100-form-btn">
                        <input type="submit" class="login100-form-btn" value="@ButtonText" />
                    </div>

                    <div class="text-center p-t-12">
                        @* <span class="txt1">
                            Forgot
                            </span>
                            <a class="txt2" href="#">
                            Username / Password?
                            </a> *@
                    </div>

                    <div class="text-center p-t-136">
                        <a class="txt2" href="#" @onclick="(() => ChangeForm(true))">
                            Hesabın varsa buradan <b>Giriş Yap!</b>
                            <i class="fa fa-arrow-right m-l-5" aria-hidden="true"></i>
                        </a>
                    </div>
                    <ValidationSummary />
                </EditForm>
            }


            </div>
        </div>
    </div>

    @code {
    private bool LogInPage = true;
    private string SifreTekrar = "";

    [Parameter]
    public Uye uye { get; set; } = new Uye();
    [Parameter]
    public string ButtonText { get; set; } = "Giriş Yap";
    async void OnValidSubmit()
    {
        Log.Information("uye.ToString()");
        Log.Information(uye.Email);
        Log.Information(uye.Sifre);
        toastService.ShowSuccess("I'm a SUCCESS message");
        await Task.Delay(19);
    }

    async void TryToLogIn()
    {

        if (GeneralFunctions.IsValidEmail(uye.Email) && uye.Sifre.Length > 5 && uye.Sifre.Length < 21)
        {
            if (Program.DbCon.State == System.Data.ConnectionState.Closed)
                Program.DbCon.Open();

            using var cmd = new NpgsqlCommand(SqlCommands.CheckUserLogin, Program.DbCon);

            cmd.Parameters.AddWithValue("email", uye.Email);
            cmd.Parameters.AddWithValue("sifre", uye.Sifre);
            cmd.Prepare();

            Log.Information($"Command: {SqlCommands.CheckUserLogin}");
            try
            {
                Log.Information("try NpgsqlCommand CheckUserLogin");

                NpgsqlDataReader reader = cmd.ExecuteReader();

                if (reader.HasRows && reader.Read())
                {
                    Log.Information($"0: {reader.GetValue(0)} 1: {reader.GetValue(1)}");
                    Log.Information($"reader.FieldCount: {reader.FieldCount}");
                    Log.Information($"reader.VisibleFieldCount: {reader.VisibleFieldCount}");

                    var expando = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;
                    for (int i = 0; i < reader.VisibleFieldCount; i++)
                    {
                        expando[reader.GetName(i)] = reader.GetValue(i);
                    }

                    string json = JsonSerializer.Serialize(expando);
                    Log.Information($"json: {json}");
                    
                    // SIFRE123
                    // ornek@ornek.com
                }
                else
                {
                    toastService.ShowWarning("Girilen bilgilere sahip bir kullanıcı bulunamadı! Email ve Şifrenizi doğru yazdığınızdan emin olun. Henüz kayıt olmadıysanız lütfen kayıt olun.", "Uyarı");
                }

                Log.Information($"try NpgsqlCommand CheckUserLogin reader.HasRows {reader.HasRows}");
            }
            catch (Npgsql.PostgresException npge)
            {
                Log.Error($"Exception handled: {npge}");
                toastService.ShowError($"Kritik bir hata oluştu: {npge.Detail}");
            }

            if (Program.DbCon.State == System.Data.ConnectionState.Open)
                Program.DbCon.Close();
        } 
        else
        {
            toastService.ShowWarning("Geçerli bir mail adresi ve en az 6 en fazla 20 karakter uzunluğunda bir şifre girdiğinizden emin olun", "Uyarı");
        }
        
        await Task.Delay(19);
    }

    protected override async Task OnInitializedAsync()
    {
        uye.DogumTarihi = DateTime.Today;
        await Task.Delay(100);
    }

    private void ChangeForm(bool lp)
    {
        LogInPage = lp;
        if (!lp)
            ButtonText = "Hesap Oluştur";
        else
            ButtonText = "Giriş Yap";
    }

}