@using Npgsql
@using Serilog
@using System.Text.Json
@using TomeKop.Pages
@using Utils
@using Blazored.Toast.Configuration
@inherits LayoutComponentBase

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager uriHelper;

<BlazoredToasts Position="ToastPosition.BottomRight" Timeout="3" IconType="IconType.FontAwesome" ErrorIcon="fa fa-bug"
    InfoIcon="fa fa-info" SuccessIcon="fa fa-thumbs-up" WarningIcon="fa fa-exclamation" ShowProgressBar="true" />
@if (Waiting)
{
    <div class="text-center">
        <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
            <span class="visually-hidden"></span>
        </div>
    </div>
}
else if (uye != null)
{
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <div class="main">
            <div class="top-row px-4">
                @* <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a> *@
                <span>Hoşgeldin @uye.adi @uye.soyadi</span>
                <NavLink href="profil"> Profil Bilgileri</NavLink>
                <a href="#" @onclick="LogOut">Çıkış Yap</a>
            </div>

            <div class="content px-4">
                @Body
            </div>
        </div>
    </div>
}
else
{
    <Login />
}

@code {
    private bool Waiting = true;
    public Uye uye;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(10);

        // await sessionStorage.SetItem<Uye>(key, forecasts);
        // await localStorage.SetItem<WeatherForecast[]>(key, forecasts);
        // var fromLocal = await localStorage.GetItem<WeatherForecast[]>(key);
    }

    private async Task LogOut()
    {
        Waiting = true;
        uye = null;
        await localStorage.RemoveItemAsync("uyeJsonString");
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        Waiting = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Log.Information("OnAfterRenderAsync");
        if (firstRender)
        {
            Log.Information("firstRender");
            try
            {
                uye = JsonSerializer.Deserialize<Uye>(await localStorage.GetItemAsync<byte[]>("uyeJsonString"));
                Log.Information("try fromSession sessionStorage");
            }
            catch (System.Exception)
            {
                Log.Information("catch fromSession Exception");

                if (Program.DbCon.State == System.Data.ConnectionState.Closed)
                    Program.DbCon.Open();
                using var cmd = new NpgsqlCommand(SqlCommands.CheckIfUyelerTableExist, Program.DbCon);

                try
                {
                    var version = cmd.ExecuteScalar().ToString();
                    Log.Information($"try NpgsqlCommand CheckIfUyelerTableExist {version}");
                }
                catch (System.Exception)
                {
                    Log.Information("catch CreateUyeTable");
                    using var cmd2 = new NpgsqlCommand(SqlCommands.CreateUyeTable, Program.DbCon);
                    cmd2.ExecuteNonQuery();
                }
                if (Program.DbCon.State == System.Data.ConnectionState.Open)
                    Program.DbCon.Close();
            }
            Waiting = false;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}