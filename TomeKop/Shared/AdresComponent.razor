@using Npgsql
@using System.Text.Json
@using Utils
@using Serilog

@inject NavigationManager uriHelper;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IToastService toastService

<h2>Adresler</h2>
@if (Waiting)
{
    <div class="spinner-grow text-danger" role="status">
        <span class="visually-hidden"></span>
    </div>
}
else
{
    <br />
    <EditForm class="form-group" Model="@adres" OnValidSubmit="@AdresEkle">
        <DataAnnotationsValidator />
        <div class="form-group">
            <InputText @bind-Value="@adres.il" class="form-control" placeholder="İl" />
        </div>
        <div class="form-group">
            <InputText @bind-Value="@adres.ilce" class="form-control" placeholder="İlçe" />
        </div>
        <div class="form-group">
            <InputText @bind-Value="@adres.mahalle" class="form-control" placeholder="Mahalle" />
        </div>
        <div class="form-group">
            <InputTextArea @bind-Value="@adres.adres" class="form-control" placeholder="Adres Detayı" />
        </div>

        <button class="btn btn-outline-success" type="submit">Kaydet</button>
        <ValidationSummary />
    </EditForm>

    @foreach (Adres adresItem in adresler)
    {
        <div class="card mb-4">
            <div class="card-body">
                @adresItem.mahalle @adresItem.adres @adresItem.ilce / @adresItem.il
            </div>
            <div class="card-footer">
                <button class="btn btn-warning" @onclick="@(() => adres = adresItem)">Düzenle</button>
                <button class="btn btn-danger" @onclick="@(() => AdresSil(adresItem))">Sil</button>
            </div>
        </div>
    }
}

@code {
    private bool Waiting = true;
    public Uye uye = new Uye();
    private List<Adres> adresler = new List<Adres>();
    private Adres adres = new Adres();
    private NpgsqlConnection DbCon = new NpgsqlConnection(Program.ConStr);
    private NoticeEventHandler noticeEventHandler;
    private void OnNotice(object O, NpgsqlNoticeEventArgs E)
    {        
        if (noticeEventHandler != null)
        {
            // noticeEventHandler(this, E);
            toastService.ShowInfo(E.Notice.MessageText);
            Log.Information(E.Notice.MessageText);
        }
    }
    private async void AdresSil(Adres adr)
    {
        Waiting = true;
        if (DbCon.State == System.Data.ConnectionState.Closed)
            DbCon.Open();
        using var cmd = new NpgsqlCommand(SqlCommands.DeleteAdres, DbCon);
        cmd.Parameters.AddWithValue("adres_id", adr.adres_id);

        cmd.Prepare();

        cmd.ExecuteNonQuery();

        if (DbCon.State == System.Data.ConnectionState.Open)
            DbCon.Close();

        await Task.Delay(20);
        Waiting = false;
        await Task.Delay(5000);

        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }
    private async void AdresEkle()
    {
        Waiting = true;
        if (DbCon.State == System.Data.ConnectionState.Closed)
            DbCon.Open();
        var cmd = new NpgsqlCommand(SqlCommands.CreateAdres, DbCon);

        if (adres.adres_id > 0)
        {
            cmd = new NpgsqlCommand(SqlCommands.UpdateAdres, DbCon);
            cmd.Parameters.AddWithValue("adres_id", adres.adres_id);
        }

        adres.uye_id = uye.uye_id;

        cmd.Parameters.AddWithValue("il", adres.il);
        cmd.Parameters.AddWithValue("ilce", adres.ilce);
        cmd.Parameters.AddWithValue("mahalle", adres.mahalle);
        cmd.Parameters.AddWithValue("adres", adres.adres);
        cmd.Parameters.AddWithValue("uye_id", adres.uye_id);

        cmd.Prepare();

        cmd.ExecuteNonQuery();

        if (DbCon.State == System.Data.ConnectionState.Open)
            DbCon.Close();

        await Task.Delay(20);
        Waiting = false;
        adres = new Adres();
        await Task.Delay(5000);

        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                uye = JsonSerializer.Deserialize<Uye>(await localStorage.GetItemAsync<byte[]>("uyeJsonString"));
            }
            catch (System.Exception)
            { }

            if (DbCon.State == System.Data.ConnectionState.Closed)
                DbCon.Open();
            using var cmd = new NpgsqlCommand(SqlCommands.CheckIfAdresTableExist, DbCon);
            noticeEventHandler = new NoticeEventHandler(OnNotice);
            DbCon.Notice += noticeEventHandler;

            try
            {
                var version = cmd.ExecuteScalar().ToString();
                Log.Information($"try NpgsqlCommand CheckIfAdresTableExist {version}");
            }
            catch (System.Exception)
            {
                Log.Information("catch CreateAdresTable");
                
                NpgsqlCommand pgCommand = new NpgsqlCommand();
                pgCommand.Connection = DbCon;
                NpgsqlTransaction myTrans;

                myTrans = DbCon.BeginTransaction();
                pgCommand.Transaction = myTrans;

                try
                {
                    pgCommand.CommandText = SqlCommands.CreateAdresTable;
                    pgCommand.ExecuteNonQuery();
                    pgCommand.CommandText = SQLTriggers.CreateIlUyeSayiTrigger;
                    pgCommand.ExecuteNonQuery();
                    myTrans.Commit();
                }
                catch(Exception e)
                {
                    myTrans.Rollback();
                    Log.Information(e.ToString());
                }
            }

            using var cmd3 = new NpgsqlCommand(SqlCommands.SelectAdresler, DbCon);
            cmd3.Parameters.AddWithValue("uye_id", uye.uye_id);
            cmd3.Prepare();

            NpgsqlDataReader reader = cmd3.ExecuteReader();

            while (reader.HasRows && reader.Read())
            {
                var expando = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;
                for (int i = 0; i < reader.VisibleFieldCount; i++)
                {
                    expando[reader.GetName(i)] = reader.GetValue(i);
                }

                string jsonString = JsonSerializer.Serialize(expando);
                Adres dbAdres = JsonSerializer.Deserialize<Adres>(jsonString);
                adresler.Add(dbAdres);
            }


            if (DbCon.State == System.Data.ConnectionState.Open)
                DbCon.Close();

            await Task.Delay(10);
            Waiting = false;
            StateHasChanged();
        }
    }
}