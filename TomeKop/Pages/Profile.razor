@page "/profil"

@using Serilog
@using Utils
@using Npgsql
@using System.Text.Json;

@inject IToastService toastService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager uriHelper;

@if (ShowAlertDialog)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: @(ShowAlertDialog ? "block" : "none")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Profil Silmeyi Onayla</h5>
                </div>
                <div class="modal-body">
                    <p>Profilinize silmek istediğinizden emin misiniz? Profilinizi başarılı bir şekilde silebilmek için diğer bölümlerdeki tüm verilerinizi silmiş olmanız gerekiyor.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="DeleteProfile">Sil</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@(()=> ShowAlertDialog = false)">Hayır Silme</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="container-fluid row">
    <div class="col-lg-4">
        <h2>Profil Sayfası</h2>
        <EditForm class="form-group" Model="@uye" OnValidSubmit="UpdateProfile">
            <div class="form-group">
                <label>Adı: </label>
                <InputText @bind-Value="@uye.adi" class="form-control" />
            </div>
            <div class="form-group">
                <label>Soyadı: </label>
                <InputText @bind-Value="@uye.soyadi" class="form-control" />
            </div>
            <div class="form-group">
                <label>Cinsiyet: </label>
                <br/>
                <InputRadioGroup @bind-Value="@uye.cinsiyet" class="form-control">
                    <InputRadio Value="'E'" /><span> </span> Erkek
                    <InputRadio Value="'K'" /> <span> </span>Kadın
                    <InputRadio Value="'D'" /> <span> </span>Diğer
                </InputRadioGroup>
            </div>
            <div class="form-group">
                <label>TC Kimlik Numarası: </label>
                <InputText @bind-Value="@uye.tc_no" class="form-control" />
            </div>
            <div class="form-group">
                <label>Telefon Numarası: </label>
                <InputText @bind-Value="@uye.tel_no" class="form-control" />
            </div>
            <div class="form-group">
                <label>Email Adresi: </label>
                <InputText @bind-Value="@uye.email" class="form-control" />
            </div>
            <div class="form-group">
                <label>Şifre: </label>
                <InputText @bind-Value="@uye.login_password" class="form-control" />
            </div>
            <div class="form-group">
                <label>Doğum Tarihi: </label>
                <InputDate @bind-Value="@uye.dogum_tarihi" class="form-control" />
            </div>
            @if (progressing)
                {
                    <div class="text-center">
                        <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
                            <span class="visually-hidden"></span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="input-group">
                        <input type="submit" class="btn btn-success" value="Güncelle" />
                    </div>
                }
            </EditForm>
            <br/>
            <br/>
            <div class="input-group">
                <button @onclick="@(()=> ShowAlertDialog = true)" class="btn btn-danger">Profili Sil</button>
            </div>
        </div>
        <div class="col-lg-4">
            <AdresComponent />
        </div>
        <div class="col-lg-4">
            @if (uye.danisman_id > 0)
            {
                <Danisman />
            }            
        </div>
    </div>

    @code {
    private bool progressing = false;
    private bool ShowAlertDialog = false;
    private char[] cins = new char[] {'E', 'K', 'D'};
    public Uye uye = new Uye();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                uye = JsonSerializer.Deserialize<Uye>(await localStorage.GetItemAsync<byte[]>("uyeJsonString"));
                StateHasChanged();
            }
            catch (System.Exception)
            { }

        }
    }
    private async void DeleteProfile()
    {
        progressing = true;

        if (Program.DbCon.State == System.Data.ConnectionState.Closed)
            Program.DbCon.Open();

        using var cmd = new NpgsqlCommand(SqlCommands.DeleteUser, Program.DbCon);
        cmd.Parameters.AddWithValue("uye_id",uye.uye_id);

        try
        {
            cmd.Prepare();
            int sonuc = await cmd.ExecuteNonQueryAsync();
            await localStorage.RemoveItemAsync("uyeJsonString");
            
            uye = null;
            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        }
        catch (Npgsql.PostgresException npge)
        {
            Log.Error($"Exception handled: {npge}");
            toastService.ShowError($"Kritik bir hata oluştu: {npge.Detail}");
        }

        if (Program.DbCon.State == System.Data.ConnectionState.Open)
            Program.DbCon.Close();

        progressing = false;
        ShowAlertDialog = false;
    }
    private async void UpdateProfile()
    {
        progressing = true;
        if (uye.email == null || !GeneralFunctions.IsValidEmail(uye.email))
        {
            toastService.ShowWarning("Geçerli bir mail adresi girdiğinizden emin olun", "Uyarı");
        }
        else if (uye.login_password == null || uye.login_password.Length < 6 || uye.login_password.Length > 20)
        {
            toastService.ShowWarning("En az 6 en fazla 20 karakter uzunluğunda bir şifre girdiğinizden ve şifre tekrarının aynı olduğundan emin olun", "Uyarı");
        }
        else if (uye.adi == null || uye.soyadi == null || uye.adi.Length < 2 || uye.soyadi.Length < 2)
        {
            toastService.ShowWarning("Ad ve soyad boş geçilemez.", "Uyarı");
        }
        else if (uye.tc_no == null || uye.tc_no.Length != 11)
        {
            toastService.ShowWarning("Tc kimlik numarası 11 haneli olmalıdır.", "Uyarı");
        }
        else if (uye.tel_no == null || uye.tel_no.Length != 10)
        {
            toastService.ShowWarning("Telefon numarası 10 haneli olmalıdır.", "Uyarı");
        }
        else if (!cins.Contains(uye.cinsiyet))
        {
            toastService.ShowWarning("Cinsiyet seçimi yapmalısınız", "Uyarı");
        }
        else if (uye.dogum_tarihi.CompareTo(DateTime.Parse("1/1/1915")) < 0 || uye.dogum_tarihi.CompareTo(DateTime.Parse("1/1/2002")) > 0)
        {
            toastService.ShowWarning("Yaşınız 18-105 arasında olmalıdır.", "Uyarı");
        }
        else
        {
            if (Program.DbCon.State == System.Data.ConnectionState.Closed)
                Program.DbCon.Open();

            using var cmd = new NpgsqlCommand(SqlCommands.UpdateUserLogin, Program.DbCon);

            cmd.Parameters.AddWithValue("tc_no", uye.tc_no);
            cmd.Parameters.AddWithValue("adi", uye.adi);
            cmd.Parameters.AddWithValue("soyadi", uye.soyadi);
            cmd.Parameters.AddWithValue("cinsiyet", uye.cinsiyet);
            cmd.Parameters.AddWithValue("tel_no", uye.tel_no);
            cmd.Parameters.AddWithValue("dogum_tarihi", uye.dogum_tarihi);
            cmd.Parameters.AddWithValue("email", uye.email);
            cmd.Parameters.AddWithValue("login_password", uye.login_password);
            cmd.Parameters.AddWithValue("danisman_id", uye.danisman_id);
            cmd.Parameters.AddWithValue("uye_id", uye.uye_id);

            try
            {
                cmd.Prepare();
                int sonuc = await cmd.ExecuteNonQueryAsync();
                byte[] jsonString = JsonSerializer.SerializeToUtf8Bytes(uye);
                Log.Information($"jsonString: {jsonString}");

                await localStorage.SetItemAsync<byte[]>("uyeJsonString", jsonString);
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }
            catch (Npgsql.PostgresException npge)
            {
                Log.Error($"Exception handled: {npge}");
                toastService.ShowError($"Kritik bir hata oluştu: {npge.Detail}");
            }

            if (Program.DbCon.State == System.Data.ConnectionState.Open)
                Program.DbCon.Close();
        }

        progressing = false;
        await Task.Delay(19);
        StateHasChanged();
    }
}